
count_file: "../mock_data_lc/lc_mirna_counts.csv"
metadata_file: "../mock_data_lc/lc_dataset.csv"
# count_holdout_test_set: None
# metadata_holdout_test_set: None

condition_labels:
  case: "LC"
  control: "C"

preprocessing:
  train_test_split_params:
    test_size: 0.2
    random_state: 42

  threshold_filter_params:
    min_count: 10
    min_samples: 3

  pre_filter_methods:
    threshold_filter:
      use_method: True
      min_count: 10
      min_samples: 3
    variance_filter:
      use_method: False
      threshold: 0.5
    expr_percentile_filter:
      use_method: False
      threshold_percentile: 0.8
    correlation_filter:
      use_method: False
      correlation_method: "spearman" # or "pearson", "kendall"
      threshold: 0.9

  normalization_methods:
    tmm:
      use_method: False
    cpm:
      use_method: True
    vst:
      use_method: False
    deseq2:
      use_method: False


  pca:
      use_method: True
      n_components: 2
      color_by: "condition"


search_setup:
  hyperparameter_optimization_method: "gridsearch" # or "randomsearch"
  use_models:
    - random_forest
    - xgboost
  cv: 5
  cv_strategy: "stratifiedkfold" # or "kfold"
  verbose: 2
  refit: "roc_auc" # or "accuracy", "precision", "recall", "f1"
  
  random_forest:
    gridsearch:
      param_grid:
        n_estimators: 
          type: "list"
          values: [50]
        max_depth: 
          type: "list"
          values: [10]
        max_features:  
          type: "list"
          values: [0.1]
        min_samples_split: 
          type: "list"
          values: [2]

        # n_estimators: [50, 100, 200, 300]
        # max_depth: [None, 10, 20, 30]
        # max_features: [0.1, 1.0]
        # min_samples_split: [2, 5, 10]

    randomsearch:
      param_dist:
        # n_estimators:
        #   type: "np.arange"
        #   start: 100
        #   stop: 1000
        #   step: 100


      param_grid:
        n_estimators: [50]
        max_depth: [None]
        max_features: [0.1]
        min_samples_split: [2]

        # n_estimators: [50, 100, 200, 300]
        # max_depth: [None, 10, 20, 30]
        # max_features: [0.1, 1.0]
        # min_samples_split: [2, 5, 10]


  xgboost:
    gridsearch: 
      param_grid:
        n_estimators:  
          type: "list"
          values: [100]
        max_depth: 
          type: "list"
          values: [6]
        learning_rate: 
          type: "list"
          values: [0.3]
        min_child_weight: 
          type: "list"
          values: [1]
        gamma: 
          type: "list"
          values: [0]
        subsample: 
          type: "list"
          values: [1.0]
        colsample_bytree: 
          type: "list"
          values: [1.0]
        colsample_bylevel: 
          type: "list"
          values: [1.0]
        colsample_bynode: 
          type: "list"
          values: [1.0]
        reg_lambda: 
          type: "list"
          values: [1]
        reg_alpha: 
          type: "list"
          values: [0]


    randomsearch:
      param_grid:
        n_estimators: [100]
        max_depth: [6]
        learning_rate: [0.3]
        min_child_weight: [1]
        gamma: [0]
        subsample: [1.0]
        colsample_bytree: [1.0]
        colsample_bylevel: [1.0]
        colsample_bynode: [1.0]
        reg_lambda: [1]
        reg_alpha: [0]

      # n_estimators: [100, 300, 500, 1000]
      # max_depth: [3, 5, 7, 9, 12]
      # learning_rate: [0.01, 0.05, 0.1, 0.2, 0.3]
      # min_child_weight: [1, 3, 5, 7]
      # gamma: [0, 0.1, 0.5, 1, 5]
      # subsample: [0.5, 0.7, 0.9, 1.0]
      # colsample_bytree: [0.5, 0.7, 0.9, 1.0]
      # colsample_bylevel: [0.5, 0.7, 0.9, 1.0]
      # colsample_bynode: [0.5, 0.7, 0.9, 1.0]
      # reg_lambda: [0, 1, 10, 100]
      # reg_alpha: [0, 0.1, 1, 10]